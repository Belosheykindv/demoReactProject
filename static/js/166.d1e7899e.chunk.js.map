{"version":3,"file":"static/js/166.d1e7899e.chunk.js","mappings":"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","sources":["Components/Dialogs/Message/Message.jsx","webpack://my-first-app/./src/Components/Dialogs/DialogItem/DialogItem.module.css?e6db","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/DialogsC.tsx","Components/Dialogs/Dialogs-container.jsx","webpack://my-first-app/./src/Components/Dialogs/Dialogs.module.css?5d10"],"sourcesContent":["import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.messages}>{props.message} <hr /></div>\r\n}\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogItem_dialogs__ilivO\",\"dialogsItems\":\"DialogItem_dialogsItems__Dj2pt\",\"active\":\"DialogItem_active__I0iJv\",\"messages\":\"DialogItem_messages__g1OSr\",\"modalBlock\":\"DialogItem_modalBlock__Wf3Dj\",\"imgBlock\":\"DialogItem_imgBlock__jbrdG\",\"descriptionBlock\":\"DialogItem_descriptionBlock__GAGgc\",\"name\":\"DialogItem_name__5O2fR\",\"lowDescription\":\"DialogItem_lowDescription__AmS80\",\"btnBlock\":\"DialogItem_btnBlock__RMw0j\",\"cardBlock\":\"DialogItem_cardBlock__fL1h1\",\"ingrDescription\":\"DialogItem_ingrDescription__nn1w4\",\"ingrPrice\":\"DialogItem_ingrPrice__p3t0V\"};","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './DialogItem.module.css';\r\nimport Modal from \"antd/es/modal/Modal\";\r\nimport { Card, Button } from \"antd\";\r\nimport { v1 } from \"uuid\";\r\nconst DialogItem = (props) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    let path = '/dialogs/' + props.id;\r\n    let ingridients = props.ingridients.map((element) =>\r\n        <Card\r\n        key={v1()}\r\n           bodyStyle={{padding:'10px',display:'flex',flexDirection:'column',alignItems:'center'}}\r\n            hoverable\r\n            style={{\r\n                width: 120,\r\n                height: 'min-content'\r\n            }}\r\n            cover={<img alt=\"example\" src={props.imgSrc} />}>\r\n            <span >Ингридиент из Стейта</span>\r\n          <p >99р</p>\r\n        </Card>\r\n    )\r\n\r\n    return <div className={s.dialogsItems}>\r\n        <img src={props.imgSrc}></img>\r\n        {/* <NavLink to={path} className={navData => navData.isActive ? s.active : s.dialogsItems}> */}\r\n        <div>\r\n            <span onClick={showModal}>\r\n                {props.name}\r\n            </span>\r\n        </div>\r\n        {/* </NavLink> */}\r\n        <Modal width={900} height={'auto'} centered={true} keyboard={true} open={isModalOpen} onOk={handleOk} okText={`Добавить в корзину за ${props.id} руб`} onCancel={handleCancel} cancelButtonProps={{ style: { display: 'none' } }} okButtonProps={{ style: { width: 'min-content' } }}>\r\n            <div className={s.modalBlock}>\r\n                <div className={s.imgBlock}>\r\n                    <img src={props.imgSrc} />\r\n                </div>\r\n                <div className={s.descriptionBlock}>\r\n                    <div className={s.name}> <h3>{props.name}</h3></div>\r\n                    <div className={s.lowDescriptions}><span>25 см, традиционное тесто 25, 380 г</span></div>\r\n                    <div className={s.btnBlock}>\r\n                        <Button >Small</Button>\r\n                        <Button >Medium</Button>\r\n                        <Button >Large</Button>\r\n                    </div>\r\n                    <div className={s.name}>\r\n                        <span>Добавить по вкусу</span>\r\n                    </div>\r\n                    <div className={s.cardBlock}>\r\n                        {ingridients}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    </div>\r\n}\r\nexport default DialogItem;","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Field, Form } from \"react-final-form\";\r\nimport {  maxLength100, required } from \"../../Utils/Validators/validators\";\r\nimport { FormCreate } from \"../Common/FormControls/formControls\";\r\nimport { Input, List, Avatar, Button } from \"antd\";\r\nimport { addDialogMessage, messagesType } from \"../../Redux/dialogPage-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IRootStore } from \"../../Redux/reduxStore\";\r\ninterface GenericIdentityFn<Type> {\r\n    (arg: Type): Type;\r\n}\r\nconst Dialogs = (props: { auth: boolean; dialogsPage:any }) => {\r\n    const dispatch = useDispatch()\r\n    const dialogs = useSelector((state: IRootStore) => state.dialogsPage.dialogs)\r\n    const messages = useSelector((state: IRootStore) => state.dialogsPage.messages)\r\n    const [status, setButtonStatus] = useState(false)\r\n    const composeValidators: any = (...validators: any[]) => (value: string) =>\r\n        validators.reduce((error: string, validator: any) => error || validator(value), undefined)\r\n\r\n    const onSubmit = (values: { newMessageBody: string | undefined; }) => {\r\n        if (values.newMessageBody !== '') if (values.newMessageBody !== undefined) {\r\n            dispatch(addDialogMessage(values.newMessageBody))\r\n            values.newMessageBody = ''\r\n            setButtonStatus(false)\r\n        }\r\n\r\n    };\r\n    const buttonHandler = (e: string) => {\r\n        if (e == '') { setButtonStatus(false) }\r\n        else\r\n            setButtonStatus(true)\r\n    }\r\n    let dialogElements = dialogs.map(d => <DialogItem ingridients={props.dialogsPage.dialogs} name={d.name} id={d.id} imgSrc={d.imgSrc} key={d.id} />);\r\n    let messageElement = messages.map(m => <Message message={m.message} key={m.id} />);\r\n    if (props.auth === false) return <Navigate to={'/login'} />\r\n    return (\r\n        <nav className={s.dialogs}>\r\n            <div >\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <Form\r\n                    onSubmit={onSubmit}\r\n                    render={({ handleSubmit }) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div>\r\n                                <Field\r\n                                    onInput={(e: { currentTarget: { value: any; }; }) => { buttonHandler(e.currentTarget.value) }}\r\n                                    name={'newMessageBody'}\r\n                                    defaultValue={''}\r\n                                    validate={composeValidators(required, maxLength100)}>\r\n                                    {({ input, meta }) => (\r\n                                        <div>\r\n                                            <Input {...input} type=\"text\" placeholder=\"Введите сообщение\" />\r\n                                            {meta.error && meta.modified && <span>{meta.error}</span>}\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n\r\n                            </div>\r\n                        </form>)}\r\n                />\r\n                {messageElement}\r\n            </div>\r\n            <div className={s.messages}>Здесь могла бы быть ваша реклама</div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","\r\nimport { connect } from \"react-redux\";\r\nimport Dialogs from \"./DialogsC\";\r\nimport { withAuthRedirect } from \"../../Hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {}),\r\n    withAuthRedirect\r\n)(Dialogs);","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__prqlk\",\"dialogsItems\":\"Dialogs_dialogsItems__MsBDq\",\"active\":\"Dialogs_active__XGQ+o\",\"messages\":\"Dialogs_messages__1ybel\",\"button\":\"Dialogs_button__6VBcC\",\"btn\":\"Dialogs_btn__ayx5J\",\"disBtn\":\"Dialogs_disBtn__pjuCW\",\"todoMain\":\"Dialogs_todoMain__REx+I\",\"todoInput\":\"Dialogs_todoInput__upOVV\",\"todoList\":\"Dialogs_todoList__TxKrX\",\"inputCB\":\"Dialogs_inputCB__-QJXn\"};"],"names":["props","className","s","message","useState","isModalOpen","setIsModalOpen","ingridients","id","map","element","bodyStyle","padding","display","flexDirection","alignItems","hoverable","style","width","height","cover","alt","src","imgSrc","v1","onClick","name","Modal","centered","keyboard","open","onOk","okText","onCancel","cancelButtonProps","okButtonProps","dispatch","useDispatch","dialogs","useSelector","state","dialogsPage","messages","setButtonStatus","composeValidators","validators","value","reduce","error","validator","undefined","dialogElements","d","messageElement","m","auth","to","onSubmit","values","newMessageBody","addDialogMessage","render","handleSubmit","onInput","e","buttonHandler","currentTarget","defaultValue","validate","required","maxLength100","input","meta","type","placeholder","modified","compose","connect","withAuthRedirect","Dialogs"],"sourceRoot":""}