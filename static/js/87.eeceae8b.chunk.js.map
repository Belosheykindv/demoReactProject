{"version":3,"file":"static/js/87.eeceae8b.chunk.js","mappings":"mOAMA,EAHgB,SAACA,GACb,OAAO,iBAAKC,UAAWC,EAAAA,EAAAA,SAAhB,UAA6BF,EAAMG,QAAnC,KAA4C,oBACtD,E,WCJD,EAAqE,iCAArE,EAA+G,2BCY/G,EATmB,SAACH,GAChB,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OAAO,iBAAKJ,UAAWC,EAAhB,WACH,gBAAKI,IAAKN,EAAMO,UAChB,SAAC,KAAD,CAASC,GAAIJ,EAAMH,UAAW,SAAAQ,GAAO,OAAIA,EAAQC,SAAWR,EAAWA,CAAlC,EAArC,UACA,yBAAMF,EAAMW,WAGnB,E,uDCuED,EAnEgB,SAACX,GACb,IAAMY,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAuBA,EAAMC,YAAYH,OAAzC,IACtBI,GAAWH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAuBA,EAAMC,YAAYC,QAAzC,IAC7B,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAeC,GAAf,WACMC,EAAyB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAA0B,SAACC,GAAD,OACrDD,EAAWE,QAAO,SAACC,EAAeC,GAAhB,OAAmCD,GAASC,EAAUH,EAAtD,QAA8DI,EAD3B,CAA1B,EAgB3BC,EAAiBd,EAAQe,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAMN,GAAIyB,EAAEzB,GAAIE,OAAQuB,EAAEvB,QAAauB,EAAEzB,GAAjE,IAC9B0B,EAAiBb,EAASW,KAAI,SAAAG,GAAC,OAAI,SAAC,EAAD,CAAS7B,QAAS6B,EAAE7B,SAAc6B,EAAE3B,GAAxC,IACnC,OAAmB,IAAfL,EAAMiC,MAAuB,SAAC,KAAD,CAAUzB,GAAI,YAE3C,iBAAKP,UAAWC,EAAAA,EAAAA,QAAhB,WACI,yBACK0B,KAEL,iBAAK3B,UAAWC,EAAAA,EAAAA,SAAhB,WACI,SAAC,KAAD,CACIgC,SAvBC,SAACC,GACgB,KAA1BA,EAAOC,qBAAqDT,IAA1BQ,EAAOC,iBACzCxB,GAASyB,EAAAA,EAAAA,GAAiBF,EAAOC,iBACjCD,EAAOC,eAAiB,GACxBhB,GAAgB,GAGvB,EAiBekB,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACJ,kBAAML,SAAUK,EAAhB,WACI,0BACI,SAAC,KAAD,CACIC,QAAS,SAACC,IApBpB,SAACA,GACJrB,EAAN,IAALqB,EAGP,CAgBsFC,CAAcD,EAAEE,cAAcpB,MAAQ,EAC7FZ,KAAM,iBACNiC,aAAc,GACdC,SAAUxB,EAAkByB,EAAAA,GAAUC,EAAAA,IAJ1C,SAKK,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,4BACI,SAAC,KAAD,kBAAWD,GAAX,IAAkBE,KAAK,OAAOC,YAAY,uGACzCF,EAAKxB,OAASwB,EAAKG,WAAY,0BAAOH,EAAKxB,UAHnD,OAST,0BACI,sBAlBJ,IA2BXM,MAEL,gBAAK9B,UAAWC,EAAAA,EAAAA,SAAhB,uLAGX,E,WCnED,GAAemD,E,SAAAA,KACXC,EAAAA,EAAAA,KARoB,SAACtC,GACrB,MAAO,CACHC,YAAaD,EAAMC,YAE1B,GAI4B,CAAC,GAC1BsC,EAAAA,EAFJ,CAGEC,E,sBCfF,KAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,wBAAwB,IAAM,qBAAqB,OAAS,wBAAwB,SAAW,0BAA0B,UAAY,2BAA2B,SAAW,0BAA0B,QAAU,yB","sources":["Components/Dialogs/Message/Message.jsx","webpack://my-first-app/./src/Components/Dialogs/DialogItem/DialogItem.module.css?9cb2","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/DialogsC.tsx","Components/Dialogs/Dialogs-container.jsx","webpack://my-first-app/./src/Components/Dialogs/Dialogs.module.css?db5c"],"sourcesContent":["import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.messages}>{props.message} <hr /></div>\r\n}\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogItem_dialogs__ilivO\",\"dialogsItems\":\"DialogItem_dialogsItems__Dj2pt\",\"active\":\"DialogItem_active__I0iJv\",\"messages\":\"DialogItem_messages__g1OSr\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './DialogItem.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return <div className={s.dialogsItems}>\r\n        <img src={props.imgSrc}></img>\r\n        <NavLink to={path} className={navData => navData.isActive ? s.active : s.dialogsItems}>\r\n        <div>{props.name}</div>\r\n        </NavLink>\r\n    </div>\r\n}\r\nexport default DialogItem;","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Field, Form } from \"react-final-form\";\r\nimport {  maxLength100, required } from \"../../Utils/Validators/validators\";\r\nimport { FormCreate } from \"../Common/FormControls/formControls\";\r\nimport { Input, List, Avatar, Button } from \"antd\";\r\nimport { addDialogMessage, messagesType } from \"../../Redux/dialogPage-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IRootStore } from \"../../Redux/reduxStore\";\r\ninterface GenericIdentityFn<Type> {\r\n    (arg: Type): Type;\r\n}\r\nconst Dialogs = (props: { auth: boolean; }) => {\r\n    const dispatch = useDispatch()\r\n    const dialogs = useSelector((state: IRootStore) => state.dialogsPage.dialogs)\r\n    const messages = useSelector((state: IRootStore) => state.dialogsPage.messages)\r\n    const [status, setButtonStatus] = useState(false)\r\n    const composeValidators: any = (...validators: any[]) => (value: string) =>\r\n        validators.reduce((error: string, validator: any) => error || validator(value), undefined)\r\n\r\n    const onSubmit = (values: { newMessageBody: string | undefined; }) => {\r\n        if (values.newMessageBody !== '') if (values.newMessageBody !== undefined) {\r\n            dispatch(addDialogMessage(values.newMessageBody))\r\n            values.newMessageBody = ''\r\n            setButtonStatus(false)\r\n        }\r\n\r\n    };\r\n    const buttonHandler = (e: string) => {\r\n        if (e == '') { setButtonStatus(false) }\r\n        else\r\n            setButtonStatus(true)\r\n    }\r\n    let dialogElements = dialogs.map(d => <DialogItem name={d.name} id={d.id} imgSrc={d.imgSrc} key={d.id} />);\r\n    let messageElement = messages.map(m => <Message message={m.message} key={m.id} />);\r\n    if (props.auth === false) return <Navigate to={'/login'} />\r\n    return (\r\n        <nav className={s.dialogs}>\r\n            <div >\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <Form\r\n                    onSubmit={onSubmit}\r\n                    render={({ handleSubmit }) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div>\r\n                                <Field\r\n                                    onInput={(e: { currentTarget: { value: any; }; }) => { buttonHandler(e.currentTarget.value) }}\r\n                                    name={'newMessageBody'}\r\n                                    defaultValue={''}\r\n                                    validate={composeValidators(required, maxLength100)}>\r\n                                    {({ input, meta }) => (\r\n                                        <div>\r\n                                            <Input {...input} type=\"text\" placeholder=\"Введите сообщение\" />\r\n                                            {meta.error && meta.modified && <span>{meta.error}</span>}\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n\r\n                            </div>\r\n                            <div>\r\n                                <br />\r\n                                {/* <Button\r\n                                    ghost={true}\r\n                                    disabled={status !== true}\r\n                                    type='primary'\r\n                                    htmlType={\"submit\"} >Отправить сообщение</Button> */}\r\n                            </div>\r\n                        </form>)}\r\n                />\r\n                {messageElement}\r\n            </div>\r\n            <div className={s.messages}>Здесь могла бы быть ваша реклама</div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","\r\nimport { connect } from \"react-redux\";\r\nimport Dialogs from \"./DialogsC\";\r\nimport { withAuthRedirect } from \"../../Hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {}),\r\n    withAuthRedirect\r\n)(Dialogs);","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__prqlk\",\"dialogsItems\":\"Dialogs_dialogsItems__MsBDq\",\"active\":\"Dialogs_active__XGQ+o\",\"messages\":\"Dialogs_messages__1ybel\",\"button\":\"Dialogs_button__6VBcC\",\"btn\":\"Dialogs_btn__ayx5J\",\"disBtn\":\"Dialogs_disBtn__pjuCW\",\"todoMain\":\"Dialogs_todoMain__REx+I\",\"todoInput\":\"Dialogs_todoInput__upOVV\",\"todoList\":\"Dialogs_todoList__TxKrX\",\"inputCB\":\"Dialogs_inputCB__-QJXn\"};"],"names":["props","className","s","message","path","id","src","imgSrc","to","navData","isActive","name","dispatch","useDispatch","dialogs","useSelector","state","dialogsPage","messages","useState","setButtonStatus","composeValidators","validators","value","reduce","error","validator","undefined","dialogElements","map","d","messageElement","m","auth","onSubmit","values","newMessageBody","addDialogMessage","render","handleSubmit","onInput","e","buttonHandler","currentTarget","defaultValue","validate","required","maxLength100","input","meta","type","placeholder","modified","compose","connect","withAuthRedirect","Dialogs"],"sourceRoot":""}