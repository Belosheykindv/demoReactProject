{"version":3,"file":"static/js/597.7e53a83c.chunk.js","mappings":"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","sources":["webpack://my-first-app/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileStatus.jsx","Components/Profile/ProfileInfo/ProfileAboutMe.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-first-app/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://my-first-app/./src/Components/Profile/MyPosts/Post/Post.module.scss?e644","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/profile.jsx","Components/Profile/profileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__W0Lb-\",\"profile\":\"ProfileInfo_profile__DKHaQ\",\"infoBlock\":\"ProfileInfo_infoBlock__cfsGP\",\"photoBlock\":\"ProfileInfo_photoBlock__rkBMR\",\"profileAva\":\"ProfileInfo_profileAva__APARW\",\"contact\":\"ProfileInfo_contact__Oa830\",\"key\":\"ProfileInfo_key__tdQe2\",\"aboutMeBlock\":\"ProfileInfo_aboutMeBlock__UZxU-\",\"field\":\"ProfileInfo_field__CkngA\",\"hideUnput\":\"ProfileInfo_hideUnput__L12Nu\"};","\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n// class ProfileStatus extends React.Component {\r\n//     state = {\r\n//         editMode: false,\r\n//         status: this.props.status\r\n//     }\r\n//     activateEditMode = () => {\r\n//         if (!this.props.userId) {\r\n//             this.setState({\r\n//                 editMode: true\r\n//             })\r\n//         }\r\n//     }\r\n//     deActivateEditMode = () => {\r\n//         this.setState({\r\n//             editMode: false\r\n//         });\r\n//         this.props.updateUserProfileStatus(this.state.status)\r\n//     }\r\n//     onStatusChange = (e) => {\r\n//         this.setState({\r\n//             status: e.currentTarget.value\r\n//         })\r\n//         console.log(this.state.status)\r\n//     }\r\n//     componentDidUpdate(prevProps, prevState) {\r\n//         if (prevProps.status !== this.props.status) {\r\n//             this.setState({\r\n//                 status: this.props.status\r\n//             })\r\n//         }\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {!this.state.editMode &&\r\n//                     <div>\r\n//                         <span onClick={this.activateEditMode}><b>Статус -</b> {this.props.status || 'пусто'}</span>\r\n//                     </div>}\r\n//                 {this.state.editMode &&\r\n//                     <div>\r\n//                         <input\r\n//                             onChange={this.onStatusChange}\r\n//                             autoFocus={true}\r\n//                             defaultValue={this.state.status}></input>\r\n//                         <button onClick={this.deActivateEditMode}>Сохранить</button>\r\n//                     </div>}\r\n//             </div>\r\n\r\n//         )\r\n//     }\r\n// }\r\n\r\nconst ProfileFuncStatus = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    const activateEditMode = () => {\r\n        if (!props.userId) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserProfileStatus(status)\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    // useEffect(() => { setStatus(props.status) }, [props.status])\r\n    return <div>\r\n        {!editMode &&\r\n            <div>\r\n                <span\r\n                    onClick={activateEditMode}\r\n                ><b>Статус - </b>{props.status || 'пусто'}</span>\r\n            </div>\r\n        }\r\n        {\r\n            editMode &&\r\n            <div >\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    defaultValue={props.status}></input>\r\n                <button onClick={deActivateEditMode}>Сохранить</button>\r\n            </div>\r\n        }\r\n    </div >\r\n}\r\nexport default ProfileFuncStatus;","import React, { useState } from 'react';\r\nimport Preloader from '../../Common/Preloader/preloader';\r\nimport S from './ProfileInfo.module.css'\r\nimport styles from \"../../Common/FormControls/formControls.module.css\"\r\nimport { maxLengthCreator, required } from '../../../Utils/Validators/validators';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { FormCreate, Input, createField } from '../../Common/FormControls/formControls';\r\nimport { updateAboutMe } from '../../../Redux/profilePage-reducer';\r\nimport { connect } from 'react-redux';\r\nimport ProfileFuncStatus from '../ProfileStatus';\r\n\r\nconst maxLength14 = maxLengthCreator(14)\r\nconst maxLength30 = maxLengthCreator(30)\r\nconst maxLength40 = maxLengthCreator(40)\r\n\r\nexport const ProfileAboutMe = ({ profile, ownerId, updateAboutMe, userId, key, status, updateUserProfileStatus }) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  return <div>\r\n    {!editMode\r\n      ? <div> <Profile key={key} profile={profile} userId={userId} editModeOn={() => { setEditMode(true) }} status={status} updateUserProfileStatus={updateUserProfileStatus} ownerId={ownerId} /></div>\r\n      : <div><ProfileForm key={key} profile={profile} updateAboutMe={updateAboutMe} editModeOff={() => { setEditMode(false) }} /></div>}\r\n  </div>\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return <div> <b>{contactTitle}</b>: {contactValue} </div>\r\n}\r\n\r\nconst Profile = ({ profile, userId, editModeOn, key, ownerId, status, updateUserProfileStatus }) => {\r\n  return <div>\r\n    {!userId && <label htmlFor=\"editAboutMe\">Редактировать</label>}\r\n    {!userId && <button onClick={editModeOn} id='editAboutMe' style={{ 'opacity': 0 }}>Редактировать</button>}\r\n    <div><ProfileFuncStatus\r\n      key={key}\r\n      userId={userId}\r\n      ownerId={ownerId}\r\n      status={status}\r\n      updateUserProfileStatus={updateUserProfileStatus} /></div>\r\n    <div><b>Кто я - </b>{profile.fullName}</div>\r\n    <div><b>Обо мне - </b> {profile.aboutMe}</div>\r\n    <div><b>В поисках работы - </b>{profile.lookingForAJob ? \"Да\" : \"Нет\"}</div>\r\n    <div><b>Место работы - </b>{profile.lookingForAJobDescription}</div>\r\n    <div><b>Контакты: </b>{Object.keys(profile.contacts).map((contactTitle) => {\r\n      return <div key={contactTitle} className={S.contact}><Contact contactTitle={contactTitle} contactValue={profile.contacts[contactTitle] || 'Отсутствует'} /> </div>\r\n    })}</div>\r\n\r\n  </div>\r\n\r\n}\r\nconst ProfileForm = ({ updateAboutMe, profile, editModeOff }) => {\r\n\r\n  const onSubmit = (formData) => {\r\n    updateAboutMe(formData).then(() => {\r\n      editModeOff()\r\n    });\r\n  }\r\n  return <ProfileReduxForm onSubmit={onSubmit} initialValues={profile} profile={profile} />\r\n}\r\nconst ProfileFormData = ({ handleSubmit, profile, error }) => {\r\n  return <form onSubmit={handleSubmit}>\r\n    <div >\r\n      <div className={S.aboutMeBlock}>\r\n        <div className={S.key}>Кто я\r\n        </div>\r\n        <div className={S.field}>\r\n          <Field name={'fullName'} component={FormCreate} validate={[required, maxLength14]} fieldType={'input'} />\r\n        </div>\r\n      </div>\r\n      <div className={S.aboutMeBlock}>\r\n        <div className={S.key}> Ищу работу - </div>\r\n        <div className={S.field}>\r\n          <Field name={'lookingForAJob'} component={FormCreate} type={'checkbox'} fieldType={'input'} />\r\n        </div>\r\n      </div>\r\n      <div className={S.aboutMeBlock}>\r\n        <div className={S.key}>Место работы -</div>\r\n        <div className={S.field}>\r\n          <Field name={'lookingForAJobDescription'} validate={[required, maxLength14]} component={FormCreate} fieldType={'input'} /></div>\r\n      </div>\r\n      <div className={S.aboutMeBlock}>\r\n        <div className={S.key}> Обо мне - </div>\r\n        <div className={S.field}>\r\n          <Field name={'aboutMe'} component={FormCreate} validate={[required, maxLength30]} fieldType={'input'} /></div>\r\n      </div>\r\n    </div>\r\n    <div >\r\n      <b>Контакты: </b>{Object.keys(profile.contacts).map((key) => {\r\n        return <div key={key} className={S.contact}>\r\n          <div className={S.key}>\r\n            {key}\r\n          </div>\r\n          <div className={S.field}>\r\n            <Field validate={[maxLength40]} name={'contacts.' + key} component={FormCreate} fieldType={'input'} placeholder={'Введите ваш - ' + key} />\r\n          </div>\r\n        </div>\r\n      })}\r\n    </div>\r\n    {error && <div className={styles.formSummaryError}> {error} </div>}\r\n    <button>Сохранить</button>\r\n  </form>\r\n}\r\nconst ProfileReduxForm = reduxForm({ form: 'aboutMe', enableReinitialize: true })(ProfileFormData)\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport P from './ProfileInfo.module.css';\r\nimport Anonym from '../../../Images/userPhoto.png'\r\nimport Preloader from '../../Common/Preloader/preloader';\r\nimport ProfileStatus from '../ProfileStatus';\r\nimport { ProfileAboutMe } from './ProfileAboutMe';\r\n// import { Field, Form } from 'react-final-form';\r\nimport styles from \"../../Common/FormControls/formControls.module.css\"\r\nimport { Input, Upload, Button } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\n\r\nconst ProfileInfo = React.memo((props) => {\r\n  console.log('ПЕРЕРИСОВКА')\r\n  const [isError, setError] = useState(false)\r\n  const [isVisible, setIsvidible] = useState(false)\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n  const onChange = (e) => {\r\n    if (e.target.files[0].size >= 4000000) return setError(true); setIsvidible(true)\r\n    if (e.target.files.length) {\r\n      props.updateUserPhoto(e.target.files[0])\r\n      setError(false)\r\n      setIsvidible(false)\r\n    }\r\n  }\r\n\r\n  return <div>\r\n\r\n    <div className={P.profile}>\r\n      <div className={P.photoBlock}>\r\n        {!props.userId && <label htmlFor=\"upload-photo\">Загрузить новое фото</label>}\r\n        <img\r\n          // onMouseOver={() => setTimeout(() => { setIsvidible(true) }, 500)}\r\n\r\n          src={props.profile.photos.large || Anonym}></img>\r\n        {isError && <div style={{ 'border': '2px', 'color': 'red' }}> Файл не должен превышать 4МБ </div>}\r\n        {!props.userId && <input className={P.hideUnput} id=\"upload-photo\" onChange={onChange} type={'file'} />\r\n        }\r\n      </div>\r\n      <div className={P.infoBlock}>\r\n        <div>\r\n          {/* <b>ID -</b> {props.profile.userId} */}\r\n          {/* <ProfileStatus\r\n            key={props.key}\r\n            userId={props.userId}\r\n            ownerId={props.ownerId}\r\n            status={props.userStatus}\r\n            updateUserProfileStatus={props.updateUserProfileStatus} /> */}\r\n        </div>\r\n        <div>{<ProfileAboutMe\r\n          key={props.key}\r\n          profile={props.profile}\r\n          userId={props.userId}\r\n          ownerId={props.ownerId}\r\n          updateAboutMe={props.updateAboutMe}\r\n          editModeAboutMe={props.editModeAboutMe}\r\n          status={props.userStatus}\r\n          updateUserProfileStatus={props.updateUserProfileStatus} />}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n)\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"MyPostsClass\":\"MyPosts_MyPostsClass__nRfqi\",\"inputBlock\":\"MyPosts_inputBlock__jOkuq\",\"textBlock\":\"MyPosts_textBlock__gFI2h\",\"btnBlock\":\"MyPosts_btnBlock__9MDle\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__HAcgf\",\"postContainer\":\"Post_postContainer__rhE20\",\"imgContainer\":\"Post_imgContainer__wsgdn\",\"msgContainer\":\"Post_msgContainer__FFWET\",\"btnContainer\":\"Post_btnContainer__GjFL1\",\"likeBtn\":\"Post_likeBtn__lItlp\",\"shareBtn\":\"Post_shareBtn__rCBE9\",\"delBtn\":\"Post_delBtn__Akvj9\"};","import React, { createRef } from 'react';\r\nimport P from './Post.module.scss';\r\nimport { addPostLikeActionCreator } from '../../../../Redux/profilePage-reducer';\r\nimport { Button } from 'antd';\r\nconst Post = React.memo((props) => {\r\n  let onAddLike = () => {\r\n    let postId = props.postId\r\n    props.addLike(postId)\r\n  }\r\n  const onDeletePost = () => {\r\n    let postId = props.postId\r\n    props.deletePost(postId)\r\n  }\r\n  return <div key={props.postId} className={P.postContainer}>\r\n    <div className={P.imgContainer}> <img src={props.img}></img></div>\r\n    <div className={P.msgContainer}>{props.message}</div>\r\n    <div className={P.btnContainer}>\r\n      <div className={P.likeBtn}>{props.likesCount}<Button ghost={true} size={'small'} onClick={onAddLike} type={'default'}>❤️</Button> </div>\r\n      <div className={P.shareBtn}>{props.share}<Button ghost={true} size={'small'} type={'default'}>✉</Button></div>\r\n    </div>\r\n    <div className={P.delBtn}><Button onClick={onDeletePost} type={'default'} ghost={true}>❌</Button></div>\r\n  </div >\r\n\r\n\r\n})\r\nexport default Post;","import { type } from '@testing-library/user-event/dist/type';\r\nimport React, { useState, useEffect } from 'react';\r\nimport P from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Form, Field } from 'react-final-form'\r\nimport { maxLengthCreator, required, maxLength22 } from '../../../Utils/Validators/validators';\r\nimport { FormCreate, NewInput, Textarea } from '../../Common/FormControls/formControls';\r\nimport { Button, Input, Form as AntDForm } from 'antd';\r\n\r\n// const maxLength60 = maxLengthCreator(60);\r\n\r\nconst MyPosts = (props) => {\r\n  const [isActive, setIsActive] = useState(false)\r\n\r\n  const [form] = AntDForm.useForm();\r\n  \r\n  const onFinish = (values) => {\r\n    props.addPost(values.postInput);\r\n    form.resetFields(['postInput'])\r\n    setIsActive(false)\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    props.addPost(values.addNewPost);\r\n    values.addNewPost = ''\r\n\r\n    setIsActive(false)\r\n  }\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n  const buttonHandler = (e) => {\r\n    if (e == '') { setIsActive(false) }\r\n    else\r\n      setIsActive(true)\r\n  }\r\n  let state = (props.profilePage)\r\n  let postsElements = state.posts.map((p) => <Post postId={p.id} message={p.message} likesCount={p.likesCount} share={p.share} img={p.imgSrc} addLike={props.addLike} deletePost={props.deletePost} key={p.id} />);\r\n  let userId = Number(props.router.params.userId || props.ownerUserId);\r\n  const addPostInput = document.getElementById('addNewPost')\r\n  if (userId) {\r\n    return null\r\n  }\r\n  return <div className={P.profile}>\r\n    <div className={P.MyPostsClass}>\r\n      <h3>Мои посты (Хардкод Без API)</h3>\r\n      {/* <Form\r\n        onSubmit={onSubmit}\r\n        render={({ handleSubmit }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <div className={P.inputBlock}>\r\n              <Field\r\n                onInput={(e) => { buttonHandler(e.currentTarget.value) }}\r\n                // id={'addNewPost'}\r\n                component={FormCreate}\r\n                fieldType={Input}\r\n                placeholder='Введите сообщениеee'\r\n                name={'addNewPost'}\r\n              />\r\n              <Button disabled={isActive != true} htmlType=\"submit\">Добавить</Button>\r\n            </div>\r\n          </form>)} /> */}\r\n      <div >\r\n        <AntDForm className={P.inputBlock} onFinish={onFinish} onFinishFailed={onFinishFailed} form={form}  >\r\n          <AntDForm.Item name={\"postInput\"} className={P.textBlock}>\r\n            <Input name={'postInput'} showCount={true} maxLength={600} placeholder=\"Введите сообщение\" onInput={(e) => { buttonHandler(e.currentTarget.value) }} />\r\n          </AntDForm.Item>\r\n          <AntDForm.Item className={P.btnBlock}>\r\n            <Button disabled={isActive != true} className={P.btnBlock} htmlType=\"submit\">Добавить</Button>\r\n          </AntDForm.Item>\r\n        </AntDForm>\r\n      </div>\r\n      <div>{postsElements}</div>\r\n\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addPostTextActionCreator, addPostLikeActionCreator } from '../../../Redux/profilePage-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { withAuthRedirect } from '../../../Hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from '../../../Hoc/withRouter';\r\nimport { addLike, addPost, deletePost } from '../../../Redux/profilePage-reducer';\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profilePage: (state.profilePage),\r\n    isAuth: state.auth.isAuth,\r\n    ownerId: state.auth.id\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { addPost, addLike, deletePost }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(MyPosts);\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n\r\n  return <div>\r\n    <ProfileInfo\r\n      profile={props.profile}\r\n      userId={props.userId}\r\n      ownerId={props.ownerId}\r\n      userStatus={props.userStatus}\r\n      updateUserProfileStatus={props.updateUserProfileStatus}\r\n      updateAboutMe={props.updateAboutMe}\r\n      savePhoto={props.savePhoto}\r\n      updateUserPhoto={props.updateUserPhoto}\r\n      editModeAboutMe={props.editModeAboutMe}\r\n      key={props.key}\r\n    />\r\n    <MyPostsContainer />\r\n\r\n  </div>\r\n\r\n}\r\n\r\nexport default Profile;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './profile';\r\nimport { getUserProfile, getUserProfileStatus, getUserAboutMe, updateUserProfileStatus, updateAboutMe, updateUserPhoto } from '../../Redux/profilePage-reducer';\r\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../Hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { maxLengthCreator } from '../../Utils/Validators/validators';\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return (\r\n      <Component\r\n        {...props}\r\n        router={{ location, navigate, params }}\r\n      />\r\n    );\r\n  }\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\n// class ProfileContainer extends React.Component {\r\n//   refreshProfile() {\r\n//     const userId = this.props.router.params.userId || this.props.ownerUserId;\r\n//     this.props.getUserProfile(userId)\r\n//     this.props.getUserProfileStatus(userId)\r\n//     this.props.getUserAboutMe(userId)\r\n//   }\r\n//   componentDidMount() {\r\n//     this.refreshProfile()\r\n//   }\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n//       this.refreshProfile()\r\n//     }\r\n\r\n//   }\r\n\r\n//   render() {\r\n//     return <div>\r\n//       <Profile {...this.props}\r\n//         profile={this.props.profile}\r\n//         userId={this.props.router.params.userId}\r\n//         ownerId={this.props.ownerUserId}\r\n//         userStatus={this.props.userStatus}\r\n//         updateUserProfileStatus={this.props.updateUserProfileStatus}\r\n//         updateAboutMe={this.props.updateAboutMe}\r\n//         updateUserPhoto={this.props.updateUserPhoto}\r\n//         editModeAboutMe={this.props.editModeAboutMe}\r\n//       // key={this.props.key}\r\n//       />\r\n//     </div>\r\n//   }\r\n// }\r\n\r\nconst ProfileContainer = (props) => {\r\n  const refreshProfile = () => {\r\n    const userId = props.router.params.userId || props.ownerUserId;\r\n    props.getUserProfile(userId)\r\n    props.getUserProfileStatus(userId)\r\n    props.getUserAboutMe(userId)\r\n  }\r\n  useEffect(() => {\r\n    refreshProfile()\r\n  }, [props.router.params.userId]);\r\n  useEffect(() => { refreshProfile() }, [])\r\n  return <div>\r\n    <Profile {...props}\r\n      profile={props.profile}\r\n      userId={props.router.params.userId}\r\n      ownerId={props.ownerUserId}\r\n      userStatus={props.userStatus}\r\n      updateUserProfileStatus={props.updateUserProfileStatus}\r\n      updateAboutMe={props.updateAboutMe}\r\n      updateUserPhoto={props.updateUserPhoto}\r\n      editModeAboutMe={props.editModeAboutMe}\r\n      key={props.key}\r\n    />\r\n  </div>\r\n}\r\n\r\nlet matStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  userStatus: state.profilePage.profileStatus,\r\n  ownerUserId: state.auth.id,\r\n  editModeAboutMe: state.profilePage.editModeAboutMe,\r\n  key: state.profilePage.key\r\n  // aboutMe: state.profilePage.aboutMe,\r\n  // lookingForAJobDescription: state.profilePage.lookingForAJobDescription\r\n})\r\nexport default compose(\r\n  connect(matStateToProps, { getUserProfile, getUserProfileStatus, updateUserProfileStatus, updateAboutMe, getUserAboutMe, updateUserPhoto, maxLengthCreator }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer)\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","onClick","userId","onChange","e","currentTarget","value","autoFocus","defaultValue","updateUserProfileStatus","maxLength14","maxLengthCreator","maxLength30","maxLength40","ProfileAboutMe","profile","ownerId","updateAboutMe","key","ProfileForm","editModeOff","Profile","editModeOn","Contact","contactTitle","contactValue","htmlFor","id","style","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","className","S","ProfileReduxForm","onSubmit","formData","then","initialValues","reduxForm","form","enableReinitialize","handleSubmit","error","Field","name","component","FormCreate","validate","required","fieldType","type","placeholder","styles","React","console","log","isError","setError","setIsvidible","P","src","photos","large","Anonym","target","files","size","length","updateUserPhoto","editModeAboutMe","userStatus","img","message","likesCount","ghost","postId","addLike","share","deletePost","isActive","setIsActive","AntDForm","postsElements","profilePage","posts","p","imgSrc","Number","router","params","ownerUserId","document","getElementById","onFinish","values","addPost","postInput","resetFields","onFinishFailed","errorInfo","showCount","maxLength","onInput","buttonHandler","disabled","htmlType","compose","connect","state","isAuth","auth","withRouter","withAuthRedirect","MyPosts","savePhoto","MyPostsContainer","profileStatus","getUserProfile","getUserProfileStatus","getUserAboutMe","Component","location","useLocation","navigate","useNavigate","useParams","refreshProfile","useEffect"],"sourceRoot":""}